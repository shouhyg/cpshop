<?php
/**
 * 后台管理员管理 通过多层控制器实现对 后天管理员和管理员权限的管理
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/11/12 0012
 * Time: 15:22
 */
namespace app\admin\controller\auth;
use app\admin\controller\Ajax;
use think\Validate;
use app\common\controller\Backend;
use app\common\model\AdminUser;
use fast\Random;


class Admin extends Backend
{
    //protected $noNeedLogin = ['add'];
    protected $model = null;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->model = new AdminUser();

    }

    /**
     * 管理员列表页
     * @return \think\response\Json|void
     */
    public function Index()
    {
        $username = input('username','');
        $where[] = ['status','=',1];
        if ($username) {
            $where[] = ['username','like','%'.$username.'%'];
        }
        $list = $this->model->where($where)->paginate(2,false,['query'=>request()->param()]);
        echo $this->model->getLastSql();
        $total = $list->total();
        $param = array(
            'minDate'=>'',
            'maxDate'=>'',
            'total'=>$total,
        );

        return $this->fetch('',[
            'list'=>$list,
            'param'=>$param,
        ]);
    }

    /**
     * 添加管理员
     * [username] => admin1
    [nickname] => 管理员1
    [password] => 123123
    [password2] => 123123
    [sex] => on
    [phone] => 15713889722
    [email] => 826183140@qq.com
    [adminRole] => 0
     */
    public function add(){
        if ($this->request->isPost()) {

            $data = input('row/a');
            if (empty($data)) {
                $this->error('缺少参数');
            }
            /**通过实例化验证器来实现验证
                $validate  = new \app\admin\validate\Admin();
                $validate->scene('add')->check($data);
                echo $validate->getError();
             * */
            /*
             * 通过控制器的validate()方法传入要使用的验证器类和验证场景来实现验证
             * 该方法验证成功时会返回一个true 验证失败时 返回错误提示信息
             */
              $result = $this->validate($data,'app\admin\validate\Admin.add');

              //验证未通过
              if ($result !== true) {
                  if(AJAX){
                      return json(['code'=>'1','msg'=>$result]);
                  }
                  return $this->error($result);
              }

                //验证通过 save 方法会默认过滤掉 非数据库的字段 如果只要插入某些字段可以通过allowfield() 方法来设置要插入的字段
                $data['salt'] = Random::alnum();
                $data['password'] = md5(md5($data['password']).$data['salt']);
                $res = $this->model->save($data);
                if ($res === false) {
                    //插入失败
                    if (AJAX) {
                        return json(['code'=>'1','msg'=>'插入失败']);
                    }
                    $this->error('插入失败');
                }
                if (AJAX) {
                    return json(['code'=>2,'msg'=>'添加失败']);
                }
                $this->success('添加成功');
        }
        return $this->fetch();

    }

    /**
     * 编辑管理员
     */
    public function edit()
    {
        $id = empty(intval(input('id'))) ? $this->error('编辑失败缺少参数') : intval(input('id'));
        $row = $this->model->get($id);
        if (!$row) {
            $this->error('记录不存在');
        }

        if ($this->request->isPost()) {
            $data  = empty(input('row/a')) ? $this->error('缺少参数') : input('row/a');
            $rule = [
                'username'=>'require|alphaDash|length:4,16|unique:admin_user,'.$id,
                'nickname'=>'require|length:4,16|unique:admin_user,'.$id,
                'sex'=>'require|in:1,2,3',
                'phone'=>'require|mobile|unique:admin_user,'.$id,
                'email'=>'require|email|unique:admin_user,'.$id,
                '__token__'=>'require|token'
            ];
            $field = [
                'username'=>'登录名',
                'nickname'=>'昵称',
                '__token__'=>'token',
                'phone'=>'手机号',
                'email'=>'邮箱',
            ];
            $validate = new Validate($rule,[],$field);
            $res = $validate->check($data);
            if (true !== $res) {
                $this->error($validate->getError());
            }

            // $row 为通过查询返回的对象，通过该对象调用save方法来更新 框架会自动判断是跟新还是插入
            $result  = $row->save($data);
            //echo $row->getLastSql();
            if ($result) {
                $this->success('更新成功');
            } else {
                $this->error('更新失败');
            }
        }

        return  $this->fetch('edit',[
                    'data'=>$row,
                ]);
    }

    /**
     * 删除管理员
     */
    public function del($id=null)
    {
        $id = intval($id);
        if (empty($id)) {
            return ['status'=>'fault','msg'=>'删除失败'];
        }
        $res = $this->model->where(['id'=>$id])->delete();
        if (!$res) {
            return ['status'=>'fault','msg'=>'删除失败'];
        }
        return ['status'=>'success','msg'=>'删除成功'];

    }
}